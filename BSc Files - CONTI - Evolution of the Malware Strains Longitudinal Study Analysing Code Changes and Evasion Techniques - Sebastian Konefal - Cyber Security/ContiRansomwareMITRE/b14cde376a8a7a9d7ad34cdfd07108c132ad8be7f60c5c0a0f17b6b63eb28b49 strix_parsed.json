[
  {
    "name": "System Network Connections Discovery",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A)",
    "external_references": {
      "external_id": "T1049",
      "url": "https://attack.mitre.org/techniques/T1049",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "bc09e2088cf700ddc37a1ae04f513f0a339c532c785deb0e79a2b9071e2a37e0"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "Windows Command Shell",
    "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.",
    "external_references": {
      "external_id": "T1059.003",
      "url": "https://attack.mitre.org/techniques/T1059/003",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "e41a8bdb6a4dd916e4a4e06e0cce53d6a0d95453ccce67c3380e21e18deaa580"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "Break Process Trees",
    "description": "An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the “parent-child\" relationship for detection, breaking this relationship could result in the adversary’s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs.(Citation: 3OHA double-fork 2022) \n\nOn Linux systems, adversaries may execute a series of [Native API](https://attack.mitre.org/techniques/T1106) calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree.\n\nAnother example is using the “daemon” syscall to detach from the current parent process and run in the background.(Citation: Sandfly BPFDoor 2022)(Citation: Microsoft XorDdos Linux Stealth 2022) ",
    "external_references": {
      "external_id": "T1036.009",
      "url": "https://attack.mitre.org/techniques/T1036/009",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "7396d772489fab4a8ddfe1de14a3c6bab40805014100878fdd79918bdbf35029"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "System Location Discovery",
    "description": "\nAdversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from [System Location Discovery](https://attack.mitre.org/techniques/T1614) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.(Citation: FBI Ragnar Locker 2020)(Citation: Sophos Geolocation 2016)(Citation: Bleepingcomputer RAT malware 2020) Windows API functions such as <code>GetLocaleInfoW</code> can also be used to determine the locale of the host.(Citation: FBI Ragnar Locker 2020) In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.(Citation: AWS Instance Identity Documents)(Citation: Microsoft Azure Instance Metadata 2021)\n\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.(Citation: Securelist Trasparent Tribe 2020)(Citation: Sophos Geolocation 2016)",
    "external_references": {
      "external_id": "T1614",
      "url": "https://attack.mitre.org/techniques/T1614",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "13865bda0e2931304e1939cdb49c891fa68f01c956d89c54424c79579a1bb810"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "Spearphishing via Service",
    "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
    "external_references": {
      "external_id": "T1566.003",
      "url": "https://attack.mitre.org/techniques/T1566/003",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "2796a616cd314b179552872cb62bf68a0c3cc0f7512801adb798e766449bcba5"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "initial-access"
    }
  },
  {
    "name": "Group Policy Preferences",
    "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit’s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>\n",
    "external_references": {
      "external_id": "T1552.006",
      "url": "https://attack.mitre.org/techniques/T1552/006",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "37a2bec2de69e991a6effe6bcd35d4f4fc32123f8e11ce47c79759f400397aff"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "credential-access"
    }
  },
  {
    "name": "Security Software Discovery",
    "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS) For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the <code>DescribeSecurityGroups</code> action with various request parameters. (Citation: DescribeSecurityGroups - Amazon Elastic Compute Cloud)",
    "external_references": {
      "external_id": "T1518.001",
      "url": "https://attack.mitre.org/techniques/T1518/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "592ccbfe4c5baba3fa2bceda62797fe6ea850b3bd3c9ba580d197a1b82954cff"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "Private Keys",
    "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. These private keys can be used to authenticate to [Remote Services](https://attack.mitre.org/techniques/T1021) like SSH or for use in decrypting other collected files such as email.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)\n\nSome private keys require a password or passphrase for operation, so an adversary may also use [Input Capture](https://attack.mitre.org/techniques/T1056) for keylogging or attempt to [Brute Force](https://attack.mitre.org/techniques/T1110) the passphrase off-line.",
    "external_references": {
      "external_id": "T1552.004",
      "url": "https://attack.mitre.org/techniques/T1552/004",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "f9ef674cda91b33ab8d08c57756b60eefa789fa443465b93d5f1400cd7797dc8"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "credential-access"
    }
  },
  {
    "name": "Spearphishing Link",
    "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\").(Citation: CISA IDN ST05-016)\n\nAdversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)",
    "external_references": {
      "external_id": "T1566.002",
      "url": "https://attack.mitre.org/techniques/T1566/002",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "08cb1e279a571ddf169d41e290be0a55c5c96ca15c23641fc54867d0dc6a9a2d"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "initial-access"
    }
  },
  {
    "name": "Inhibit System Recovery",
    "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017)\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>",
    "external_references": {
      "external_id": "T1490",
      "url": "https://attack.mitre.org/techniques/T1490",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "14928e14d38fa5eeaeaecb70beedd843fdc2af629f2b8428ade2ca4ca1053e19"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "impact"
    }
  },
  {
    "name": "System Language Discovery",
    "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: CrowdStrike Ryuk January 2019) \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelgänging May 2018)\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.",
    "external_references": {
      "external_id": "T1614.001",
      "url": "https://attack.mitre.org/techniques/T1614/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "3be3846fc5a0edac4aac41bc2977d69fbb569b5b7c10a2a0b2ec578ef290ae1e"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "Double File Extension",
    "description": "Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: <code>File.txt.exe</code> may render in some views as just <code>File.txt</code>). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.(Citation: PCMag DoubleExtension)(Citation: SOCPrime DoubleExtension) \n\nAdversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain [Initial Access](https://attack.mitre.org/tactics/TA0001) into a user’s system via [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) then [User Execution](https://attack.mitre.org/techniques/T1204). For example, an executable file attachment named <code>Evil.txt.exe</code> may display as <code>Evil.txt</code> to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.(Citation: SOCPrime DoubleExtension)\n\nCommon file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",
    "external_references": {
      "external_id": "T1036.007",
      "url": "https://attack.mitre.org/techniques/T1036/007",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "8d2e7aa3adb26a31b04e3ce8077733e82e06955013ac923cc0885e4fb3b79eb5"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Python",
    "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
    "external_references": {
      "external_id": "T1059.006",
      "url": "https://attack.mitre.org/techniques/T1059/006",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "fcb0f13e27f1b98bad1b929f8db0e576d678473b2421096a3ac66699f62dc9c6"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "Masquerade Task or Service",
    "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)",
    "external_references": {
      "external_id": "T1036.004",
      "url": "https://attack.mitre.org/techniques/T1036/004",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "5f6f2327f794c5bdff3dd53e891407caa8fefea8bd262ddffcf19fdbaf3544ef"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Phishing",
    "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.",
    "external_references": {
      "external_id": "T1566",
      "url": "https://attack.mitre.org/techniques/T1566",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "8a5e2caa61eeb4ff0b456a34b03450849aea28b6f2cd9e4f1c5563c909516ea8"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "initial-access"
    }
  },
  {
    "name": "Bash History",
    "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s <code>.bash_history</code> file. For each user, this file resides at the same location: <code>~/.bash_history</code>. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)",
    "external_references": {
      "external_id": "T1552.003",
      "url": "https://attack.mitre.org/techniques/T1552/003",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "4603c0266260663391548d3c5d36869612d2c223726e7fee1a24a50276f6aa72"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "credential-access"
    }
  },
  {
    "name": "Command and Scripting Interpreter",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
    "external_references": {
      "external_id": "T1059",
      "url": "https://attack.mitre.org/techniques/T1059",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "fc2579ba21a23f03e69ab790c1f14230cb46562487955b3bab2505313066c979"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "Time Based Evasion",
    "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053)). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled [Multi-Stage Channels](https://attack.mitre.org/techniques/T1104) to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)\n\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as [Ping](https://attack.mitre.org/software/S0097)s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to [Native API](https://attack.mitre.org/techniques/T1106) functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks)",
    "external_references": {
      "external_id": "T1497.003",
      "url": "https://attack.mitre.org/techniques/T1497/003",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "a16168640cbc16f0f8f17fd305b824f1b5cb06e9a6d1dd087fbf588e9388a6eb"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Visual Basic",
    "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
    "external_references": {
      "external_id": "T1059.005",
      "url": "https://attack.mitre.org/techniques/T1059/005",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "1886739bbc623a77bc18cff99ffa3589d785e77f48fabe47cd218868cc8b778a"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "JavaScript",
    "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
    "external_references": {
      "external_id": "T1059.007",
      "url": "https://attack.mitre.org/techniques/T1059/007",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "8f17458e22814797b74ab40bf978010a0a3ebec0534c475189ff0f5280943770"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "Software Discovery",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1518) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).",
    "external_references": {
      "external_id": "T1518",
      "url": "https://attack.mitre.org/techniques/T1518",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "f61f1d2cee11988b5f3b5f71b88b7062b1e39d92d06f2dbccf66c6bc966be8fc"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "Credentials In Files",
    "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
    "external_references": {
      "external_id": "T1552.001",
      "url": "https://attack.mitre.org/techniques/T1552/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "8808f81fbfcb029fdad8a912db13d10ed9299899167361bd0e4f9179f6f9cede"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "credential-access"
    }
  },
  {
    "name": "Virtualization/Sandbox Evasion",
    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nAdversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)\n\n",
    "external_references": {
      "external_id": "T1497",
      "url": "https://attack.mitre.org/techniques/T1497",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "670536361eb67aff51204b86467116befb21a8752d7cbee5847db96873dfc004"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Space after Filename",
    "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.\n\nFor example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).\n\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",
    "external_references": {
      "external_id": "T1036.006",
      "url": "https://attack.mitre.org/techniques/T1036/006",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "735799f357718c358d4c7bd255e97e6d2f1fc05774ca68fbcc503b2a1961cd45"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Match Legitimate Name or Location",
    "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
    "external_references": {
      "external_id": "T1036.005",
      "url": "https://attack.mitre.org/techniques/T1036/005",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "f874bb22ea640b07868ff93b8ca770244d1456ce097888a67afd00317059e5bf"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Masquerade File Type",
    "description": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001)) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.(Citation: polygot_icedID)",
    "external_references": {
      "external_id": "T1036.008",
      "url": "https://attack.mitre.org/techniques/T1036/008",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "4cf24e8ff07e7874ec3c9fc7377ae22cef31d83001c70481571449a075aa17b7"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Service Stop",
    "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)",
    "external_references": {
      "external_id": "T1489",
      "url": "https://attack.mitre.org/techniques/T1489",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "3833a9482fd806f653d1a5f709839068995c1e5cfdfb470025dae6ced81b95cc"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "impact"
    }
  },
  {
    "name": "Unsecured Credentials",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)), or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).",
    "external_references": {
      "external_id": "T1552",
      "url": "https://attack.mitre.org/techniques/T1552",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "67d0355a8d4b2441e2a5c3f758fb8c4afa2b8c452578845cb5d039d7aa54b75b"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "credential-access"
    }
  },
  {
    "name": "Right-to-Left Override",
    "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr</code> will display as <code>March 25 rcs.docx</code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js</code> will be displayed as <code>photo_high_resj.png</code>.(Citation: Infosecinstitute RTLO Technique)\n\nAdversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)/[Malicious File](https://attack.mitre.org/techniques/T1204/002) since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
    "external_references": {
      "external_id": "T1036.002",
      "url": "https://attack.mitre.org/techniques/T1036/002",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "9eb598cbb9319e5ee334b500bc2191e3b951aaa6e4a3788bc92f1ff853b71db7"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "System Time Discovery",
    "description": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time) (Citation: Technet Windows Time Service)\n\nSystem time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. (Citation: Technet Windows Time Service)\n\nThis information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) (Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)",
    "external_references": {
      "external_id": "T1124",
      "url": "https://attack.mitre.org/techniques/T1124",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "4bf4e791091fe5abad246babb6a5c587a4c972bf00b47b82d314f8e0b3448dad"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "Spearphishing Voice",
    "description": "Adversaries may use voice communications to ultimately gain access to victim systems. Spearphishing voice is a specific variant of spearphishing. It is different from other forms of spearphishing in that is employs the use of manipulating a user into providing access to systems through a phone call or other forms of voice communications. Spearphishing frequently involves social engineering techniques, such as posing as a trusted source (ex: [Impersonation](https://attack.mitre.org/techniques/T1656)) and/or creating a sense of urgency or alarm for the recipient.\n\nAll forms of phishing are electronically delivered social engineering. In this scenario, adversaries are not directly sending malware to a victim vice relying on [User Execution](https://attack.mitre.org/techniques/T1204) for delivery and execution. For example, victims may receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools ([Remote Access Software](https://attack.mitre.org/techniques/T1219)) onto their computer.(Citation: Unit42 Luna Moth)\n\nAdversaries may also combine voice phishing with [Multi-Factor Authentication Request Generation](https://attack.mitre.org/techniques/T1621) in order to trick users into divulging MFA credentials or accepting authentication prompts.(Citation: Proofpoint Vishing)",
    "external_references": {
      "external_id": "T1566.004",
      "url": "https://attack.mitre.org/techniques/T1566/004",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "b425b325c07500b331d0bd364f06a8bd9ade58ac2ab6f301579767fef5b18ec8"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "initial-access"
    }
  },
  {
    "name": "System Checks",
    "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",
    "external_references": {
      "external_id": "T1497.001",
      "url": "https://attack.mitre.org/techniques/T1497/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "0dca23f803cd01f59393a8f48c9cd83736686f8f5766611684e2de9bc4b78c95"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Spearphishing Attachment",
    "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
    "external_references": {
      "external_id": "T1566.001",
      "url": "https://attack.mitre.org/techniques/T1566/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "7d24c031bdc3c02e8c2b7aa57d1d33fa927d6c07ecf9c0f9ad5ee491f3cb25f8"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "initial-access"
    }
  },
  {
    "name": "Masquerading",
    "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)",
    "external_references": {
      "external_id": "T1036",
      "url": "https://attack.mitre.org/techniques/T1036",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "3c6ea84b6549f469b891ddaf7d2cd6290290978e0ca81c7db9317d1e716d5760"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Modify Registry",
    "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.",
    "external_references": {
      "external_id": "T1112",
      "url": "https://attack.mitre.org/techniques/T1112",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "1d926a354e099f3971842f3c215f088f885b6bbabdff27778fdb1f0979ae5935"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Credentials in Registry",
    "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
    "external_references": {
      "external_id": "T1552.002",
      "url": "https://attack.mitre.org/techniques/T1552/002",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "27f08a29ebdd821fd131be15e0c7ba097c817a28a31567943aaf445fb5899b59"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "credential-access"
    }
  },
  {
    "name": "Invalid Code Signature",
    "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)\n\nUnlike [Code Signing](https://attack.mitre.org/techniques/T1553/002), this activity will not result in a valid signature.",
    "external_references": {
      "external_id": "T1036.001",
      "url": "https://attack.mitre.org/techniques/T1036/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "cb3ff3feee8e87cf417a8a1c44d59a12b9a50d261ea539dd6c139333959c7a16"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Rename System Utilities",
    "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>). (Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)",
    "external_references": {
      "external_id": "T1036.003",
      "url": "https://attack.mitre.org/techniques/T1036/003",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "5099f0c28147f988424d750991da9cc4576b3787cb168188dc0cdaeb8c173e73"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "PowerShell",
    "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
    "external_references": {
      "external_id": "T1059.001",
      "url": "https://attack.mitre.org/techniques/T1059/001",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "721bc5d028001e8ea3584c7740eb53d745ffab20d2d139a9122be6ea3f83fafa"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "Query Registry",
    "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "external_references": {
      "external_id": "T1012",
      "url": "https://attack.mitre.org/techniques/T1012",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "e7347de0baf2207107abe9676c29b6ed3417e56425d34cc2eafc01792023b3c2"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  },
  {
    "name": "User Activity Based Checks",
    "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017) ",
    "external_references": {
      "external_id": "T1497.002",
      "url": "https://attack.mitre.org/techniques/T1497/002",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "61700680dafcf9b879c4a9e0763267b36824876c14efd484b58772fe19ba7751"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "defense-evasion"
    }
  },
  {
    "name": "Unix Shell",
    "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with [SSH](https://attack.mitre.org/techniques/T1021/004). Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
    "external_references": {
      "external_id": "T1059.004",
      "url": "https://attack.mitre.org/techniques/T1059/004",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "67fbee16f5af1e4331208b9e65bcbcf2689797ac852f03a8c0651657cb60c7c0"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "execution"
    }
  },
  {
    "name": "System Information Discovery",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. <code>show version</code>).(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)",
    "external_references": {
      "external_id": "T1082",
      "url": "https://attack.mitre.org/techniques/T1082",
      "source_name": "mitre-attack",
      "hashes": {
        "SHA-256": "cf5e3097c141421cc11aee0d941de30d0e042548c94c0966430e14ea89916cf7"
      }
    },
    "kill_chain_phases": {
      "kill_chain_name": "mitre-attack",
      "phase_name": "discovery"
    }
  }
]
