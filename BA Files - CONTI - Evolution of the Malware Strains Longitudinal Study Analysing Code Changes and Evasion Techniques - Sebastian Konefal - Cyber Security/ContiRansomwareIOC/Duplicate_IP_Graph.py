import json
import matplotlib.pyplot as plt
import numpy as np
import ipaddress

# Function to check if an IP is invalid
def is_invalid_ip(ip):
    try:
        ip_obj = ipaddress.ip_address(ip)
        # Exclude private, loopback, unspecified, multicast, reserved, and link-local addresses
        return (
            ip_obj.is_private
            or ip_obj.is_loopback
            or ip_obj.is_unspecified
            or ip_obj.is_multicast
            or ip_obj.is_reserved
            or ip_obj.is_link_local
        )
    except ValueError:
        # Ignore invalid IP formats
        return True

# Load the JSON file
json_file_path = "/home/kali/Documents/Project/IOC/duplicate_ips.json"  # Update this path to the JSON file
with open(json_file_path, "r") as file:
    data = json.load(file)

# Filter data to exclude invalid IPs
filtered_data = {ip: files for ip, files in data.items() if not is_invalid_ip(ip)}

# Prepare data for visualization
ips = list(filtered_data.keys())
file_counts = [len(files) for files in filtered_data.values()]

# Sort data by the number of files (descending order)
sorted_indices = np.argsort(file_counts)[::-1]
sorted_ips = [ips[i] for i in sorted_indices]
sorted_file_counts = [file_counts[i] for i in sorted_indices]

# Export filtered data to a new JSON file
exported_data = {ip: filtered_data[ip] for ip in sorted_ips}
export_file_path = "/home/kali/Documents/Project/IOC/filtered_ips.json"  # Update the save path
with open(export_file_path, "w") as export_file:
    json.dump(exported_data, export_file, indent=4)
print(f"Filtered IP data exported to {export_file_path}")

# Create the bar chart
plt.figure(figsize=(14, 8))
bars = plt.bar(sorted_ips, sorted_file_counts, color="skyblue")

# Add labels to bars
for bar, count in zip(bars, sorted_file_counts):
    plt.text(
        bar.get_x() + bar.get_width() / 2,  # X position
        bar.get_height() + 0.1,  # Y position
        str(count),  # Text to display
        ha="center", fontsize=8
    )

# Customize chart
plt.xticks(rotation=45, ha="right", fontsize=10)
plt.xlabel("IP Addresses", fontsize=12)
plt.ylabel("Sample Count", fontsize=12)
plt.title("IP Address Frequency Across Samples (Excluding Invalid IPs)", fontsize=14)
plt.tight_layout()

# Save and display the chart
output_path = "/home/kali/Documents/Project/IOC/ip_address_frequency_chart_filtered.png"  # Update the save path
plt.savefig(output_path)
plt.show()

print(f"Chart saved to {output_path}")
