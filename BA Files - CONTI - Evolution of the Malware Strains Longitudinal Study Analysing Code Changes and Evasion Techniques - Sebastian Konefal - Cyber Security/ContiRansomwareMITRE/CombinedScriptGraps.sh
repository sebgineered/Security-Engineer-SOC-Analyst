#!/bin/bash

# Get the directory where the script is located (renamed script_dir -> BASE_DIR)
BASE_DIR=$(dirname "$(realpath "$0")")

# Directories for input and output (renamed input_directory -> INPUT_DIR, parsed_output_directory -> PARSED_DIR)
INPUT_DIR="$BASE_DIR/SourcesStrix"
PARSED_DIR="$BASE_DIR/ParsedFilesMitre"

# Ensure the output directory exists
mkdir -p "$PARSED_DIR"

# Step 1: Run ParseScript.sh
echo "Running ParseScript to parse raw JSON files..."

for file in "$INPUT_DIR"/*.json; do
    # Extract the base file name (without directory or extension)
    base_name=$(basename "$file" .json)
    
    # Define the output file path for the current input file
    output_file="$PARSED_DIR/${base_name}_parsed.json"
    
    echo "Processing file: $file"
    
    # Parse the file and save the results to the separate output file
    jq '[
        (if type == "array" then .[] else . end)
        | select(.objects != null)
        | .objects[]
        | select(.external_references != null)
        | {
            name,
            description,
            external_references: (.external_references[] | {external_id, url, source_name, hashes}),
            kill_chain_phases: (.kill_chain_phases[]? | {kill_chain_name, phase_name})
        }
    ]' "$file" > "$output_file"
    
    echo "Parsed results saved to $output_file"
done

echo "All files processed. Parsed results saved in $PARSED_DIR"

# Step 2: Run Python Aggregation and Visualisation
echo "Running Aggregation and Visualisation with Matplotlib..."

python3 <<EOF
import os
import json
import glob
import textwrap
import matplotlib.pyplot as plt
from collections import defaultdict

# Directory containing parsed JSON files (receiving from Bash)
BASE_DIR = "$BASE_DIR"  # Pass the Bash variable directly into Python
INPUT_DIR = os.path.join(BASE_DIR, "ParsedFilesMitre")
OUTPUT_DIR = BASE_DIR

def aggregate_mitre_json_data(directory):
    """
    Aggregate MITRE JSON data from each file in the specified directory.
    (Renamed aggregate_mitre_data -> aggregate_mitre_json_data)
    """
    data_aggregation = defaultdict(lambda: {"count": 0, "samples": []})
    
    for json_file in glob.glob(f"{directory}/*.json"):
        print(f"Processing file: {json_file}")
        try:
            with open(json_file, "r") as f:
                entries = json.load(f)
                for entry in entries:
                    technique_id = entry["external_references"]["external_id"]
                    tactic = entry["kill_chain_phases"]["phase_name"]
                    technique_name = entry["name"]

                    # Aggregate counts
                    data_aggregation[technique_id]["count"] += 1
                    data_aggregation[technique_id]["tactic"] = tactic
                    data_aggregation[technique_id]["technique"] = technique_name
                    data_aggregation[technique_id]["samples"].append(json_file)
        except Exception as e:
            print(f"Error processing file {json_file}: {e}")
    
    return data_aggregation

# Aggregate the data (renamed aggregated_data -> aggregated_mitre_data)
aggregated_mitre_data = aggregate_mitre_json_data(INPUT_DIR)

# Extract data for visualisation
technique_ids = list(aggregated_mitre_data.keys())
techniques = [f"{tid}: {val['technique']}" for tid, val in aggregated_mitre_data.items()]
counts = [val["count"] for val in aggregated_mitre_data.values()]
tactics = [val["tactic"] for val in aggregated_mitre_data.values()]

# Sort data by frequency in descending order
descending_sorted_data = sorted(zip(counts, techniques), reverse=True)
sorted_counts, sorted_techniques = zip(*descending_sorted_data)
# Output the number of all techniques used in Visualisation 2
print(f"Number of all techniques used in Visualisation 2: {len(sorted_techniques)}")


###############################################################################
# Visualisation 1: Vertical Bar Chart with spacing
###############################################################################
count_frequency_groups = defaultdict(list)
for tech_label, cnt in zip(sorted_techniques, sorted_counts):
    count_frequency_groups[cnt].append(tech_label)

grouped_counts = []
grouped_labels = []

for count_value, tech_list in sorted(count_frequency_groups.items(), reverse=True):
    wrapped_label = "\n".join(textwrap.wrap(", ".join(tech_list), width=50))
    grouped_labels.append(wrapped_label)
    grouped_counts.append(count_value)

labels_with_spacing = []
counts_with_spacing = []
for i, (label, cnt) in enumerate(zip(grouped_labels, grouped_counts)):
    labels_with_spacing.append(label)
    counts_with_spacing.append(cnt)
    # If the next group has a different count, insert a spacer
    if i < len(grouped_counts) - 1 and grouped_counts[i] != grouped_counts[i + 1]:
        labels_with_spacing.append("")
        counts_with_spacing.append(0)

plt.figure(figsize=(16, 12))
bar_width = 0.6
plt.bar(range(len(sorted_counts)), sorted_counts, color="skyblue", width=bar_width)

max_count_value = max(sorted_counts)
for y_value in range(0, max_count_value + 1, 1):
    plt.axhline(y=y_value, color='gray', linestyle='dotted', linewidth=0.5)

plt.xticks(
    range(len(sorted_techniques)),
    sorted_techniques,
    rotation=45,
    ha='right',
    fontsize=14
)

plt.xlabel("MITRE Techniques (ID: Name)", fontsize=12, labelpad=10)
plt.ylabel("Frequency", fontsize=12)
plt.title("MITRE ATT&CK Techniques Frequency (Descending Order)", fontsize=16)
plt.subplots_adjust(bottom=0.5, left=0.1, right=0.95, top=0.9)
plt.tight_layout()
plt.savefig(f"{OUTPUT_DIR}/techniques_vertical_bar_chart_with_larger_font.png")
plt.show()

###############################################################################
# Visualisation 2: Pie Chart of Tactics
###############################################################################
tactic_counts_map = defaultdict(int)
for t in tactics:
    tactic_counts_map[t] += 1

plt.figure(figsize=(10, 10))
plt.pie(
    tactic_counts_map.values(),
    labels=tactic_counts_map.keys(),
    autopct="%1.1f%%",
    startangle=140,
    colors=plt.cm.tab20.colors,
    textprops={"fontsize": 12},
)
plt.title("MITRE ATT&CK Tactics Distribution", fontsize=16)
plt.savefig(f"{OUTPUT_DIR}/tactics_pie_chart.png")
plt.show()

###############################################################################
# File renaming - for labels
###############################################################################
PARSED_FILES_DIR = f"{BASE_DIR}/ParsedFilesMitre"
DATE_FILE_MAP_PATH = f"{BASE_DIR}/DateToFileName.json"

# Load the mapping of dates to file names
with open(DATE_FILE_MAP_PATH, "r") as mapping_file:
    date_to_file = json.load(mapping_file)

file_to_date = {v: k for k, v in date_to_file.items()}

for file_name in os.listdir(PARSED_FILES_DIR):
    if file_name.endswith("_parsed.json"):
        base_name = file_name.strip()
        mapped_date = file_to_date.get(base_name, None)

        if mapped_date:
            first_four_chars = base_name.split(" ")[0][:4]
            old_path = os.path.join(PARSED_FILES_DIR, file_name)
            new_name = f"{mapped_date}_{first_four_chars}.json"
            new_path = os.path.join(PARSED_FILES_DIR, new_name)
            
            os.rename(old_path, new_path)
            print(f"Renamed: {file_name} -> {new_name}")
        else:
            print(f"No mapping found for: {file_name}")

###############################################################################
# Save the sorted data to a JSON file
###############################################################################
bar_chart_data_json_path = f"{OUTPUT_DIR}/techniques_vertical_bar_chart_data.json"

sorted_data_json = [
    {"technique": technique, "count": count}
    for technique, count in zip(sorted_techniques, sorted_counts)
]

with open(bar_chart_data_json_path, "w") as json_file:
    json.dump(sorted_data_json, json_file, indent=4)
print(f"Techniques vertical bar chart data saved to {bar_chart_data_json_path}")

# Repeated saving (kept for completeness)
with open(bar_chart_data_json_path, "w") as json_file:
    json.dump(sorted_data_json, json_file, indent=4)
print(f"Techniques vertical bar chart data saved to {bar_chart_data_json_path}")

###############################################################################
# Visualisation 3: Additional Tactics Stacked Bar by Sample
###############################################################################
CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
MANUAL_PARSED_DIR = os.path.join(CURRENT_PATH, "ParsedFilesMitreManual")
STACKED_BAR_OUTPUT_DIR = CURRENT_PATH

tactics_by_sample = defaultdict(lambda: defaultdict(int))

# Aggregate tactics per sample
for json_file in glob.glob(f"{MANUAL_PARSED_DIR}/*.json"):
    current_sample = os.path.basename(json_file).replace(".json", "")
    try:
        with open(json_file, "r") as f:
            data = json.load(f)
            for entry in data:
                tactic_name = entry["kill_chain_phases"]["phase_name"]
                tactics_by_sample[current_sample][tactic_name] += 1
    except Exception as e:
        print(f"Error processing file {json_file}: {e}")

# Convert data for plotting
all_samples = sorted(tactics_by_sample.keys())
all_tactics = sorted({t for s in all_samples for t in tactics_by_sample[s]})

stacked_bar_values = {
    t: [tactics_by_sample[sample].get(t, 0) for sample in all_samples]
    for t in all_tactics
}

# Save results in JSON format
stacked_bar_output_json = os.path.join(STACKED_BAR_OUTPUT_DIR, "tactics_stacked_bar_results.json")
stacked_bar_data = {
    "samples": all_samples,
    "tactics": all_tactics,
    "data": stacked_bar_values,
    "tactics_per_sample": tactics_by_sample
}

with open(stacked_bar_output_json, "w") as json_file:
    json.dump(stacked_bar_data, json_file, indent=4)
print(f"Tactics distribution results saved to {stacked_bar_output_json}")

# Plot stacked bar chart
plt.figure(figsize=(12, 8))
stack_bottoms = [0] * len(all_samples)
for tactic in all_tactics:
    plt.bar(all_samples, stacked_bar_values[tactic], bottom=stack_bottoms, label=tactic)
    stack_bottoms = [b + v for b, v in zip(stack_bottoms, stacked_bar_values[tactic])]

max_stack_height = min(max(sum(stacked_bar_values[t]) for t in all_tactics), 45)
for freq in range(1, max_stack_height + 1):
    plt.axhline(y=freq, color='gray', linestyle='dotted', linewidth=0.5)

plt.xticks(rotation=45, ha='right', fontsize=8)
plt.xlabel("Samples")
plt.ylabel("Frequency of Tactics")
plt.title("MITRE ATT&CK Tactics Distribution Across Samples")
plt.legend(title="Tactics", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.savefig(f"{STACKED_BAR_OUTPUT_DIR}/tactics_stacked_bar_by_sample_with_lines.png")
plt.show()
EOF
